<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ChaChaCaption" xml:space="preserve">
    <value>ChaCha</value>
  </data>
  <data name="ChaChaTooltip" xml:space="preserve">
    <value>A stream cipher based on Salsa20 and used in TLS. Developed by Daniel J. Bernstein.</value>
  </data>
  <data name="InputInitialCounterCaption" xml:space="preserve">
    <value>Initial counter</value>
  </data>
  <data name="InputInitialCounterTooltip" xml:space="preserve">
    <value>Initial keystream block counter. Will be incremented for each keystream block. 64-bit for DJB version. 32-bit for IETF version.</value>
  </data>
  <data name="InputIVCaption" xml:space="preserve">
    <value>Initialization vector</value>
  </data>
  <data name="InputIVTooltip" xml:space="preserve">
    <value>Initialization vector. 64-bit for DJB version. 96-bit for IETF version.</value>
  </data>
  <data name="InputKeyCaption" xml:space="preserve">
    <value>Key</value>
  </data>
  <data name="InputKeyTooltip" xml:space="preserve">
    <value>Key. Can be 128-bit or 256-bit. A 128-bit key will be expanded into a 256-bit key via concatenation with itself.</value>
  </data>
  <data name="InputStreamCaption" xml:space="preserve">
    <value>Plain text</value>
  </data>
  <data name="InputStreamTooltip" xml:space="preserve">
    <value>Input text which should be encrypted or decrypted with ChaCha.</value>
  </data>
  <data name="OutputStreamCaption" xml:space="preserve">
    <value>Cipher text</value>
  </data>
  <data name="OutputStreamTooltip" xml:space="preserve">
    <value>Output text encrypted or decrypted with ChaCha.</value>
  </data>
  <data name="OverviewConstants" xml:space="preserve">
    <value>Constants (nothing-up-my-sleeves numbers) (128-bit)</value>
  </data>
  <data name="OverviewCounter" xml:space="preserve">
    <value>Keystream block counter</value>
  </data>
  <data name="OverviewIntro1" xml:space="preserve">
    <value>ChaCha is a stream cipher.
It generates a pseudorandom stream of bits (keystream) and then encrypts the input message by performing a XOR bitwise operation on it with this keystream.</value>
  </data>
  <data name="OverviewIntro2" xml:space="preserve">
    <value>The keystream is created by first generating keystream blocks of 512 bits and concatenating them until the keystream size is equal or larger than the input.
To generate the keystream, ChaCha uses for each keystream block a 512 bit state which consists of following four values:</value>
  </data>
  <data name="OverviewIV" xml:space="preserve">
    <value>Initialization vector</value>
  </data>
  <data name="OverviewKey" xml:space="preserve">
    <value>Key (128-bit or 256-bit. A 128-bit key will be expanded into a 256-bit key.)</value>
  </data>
  <data name="OverviewMatrixCaption" xml:space="preserve">
    <value>State as a 4x4 matrix where each cell is 4 bytes</value>
  </data>
  <data name="OverviewMatrixConstants" xml:space="preserve">
    <value>CONSTANT</value>
  </data>
  <data name="OverviewMatrixCounter" xml:space="preserve">
    <value>COUNTER</value>
  </data>
  <data name="OverviewMatrixIV" xml:space="preserve">
    <value>IV</value>
  </data>
  <data name="OverviewMatrixKey" xml:space="preserve">
    <value>KEY</value>
  </data>
  <data name="OverviewOutro1" xml:space="preserve">
    <value>Applying the ChaCha hash function to the 512 bit state would then return a keystream block.</value>
  </data>
  <data name="OverviewOutro2" xml:space="preserve">
    <value>This leads us to following steps to encrypt a message M using the ChaCha cipher:</value>
  </data>
  <data name="OverviewOutroStep1" xml:space="preserve">
    <value>Initialize state matrix</value>
  </data>
  <data name="OverviewOutroStep2" xml:space="preserve">
    <value>Generate keystream</value>
  </data>
  <data name="OverviewOutroStep3" xml:space="preserve">
    <value>M XOR Keystream</value>
  </data>
  <data name="OverviewRemark" xml:space="preserve">
    <value>Remark: Due to XOR being the inverse function to itself, decryption works exactly the same.</value>
  </data>
</root>