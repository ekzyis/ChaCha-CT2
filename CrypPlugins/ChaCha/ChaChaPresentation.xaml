<UserControl x:Class="Cryptool.Plugins.ChaCha.ChaChaPresentation"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800"
             Background="White">
  <!-- Main grid with 2 rows. One big row row for content pane and one small row for navigation bar at bottom -->
  <Grid Margin="5">
    <Grid.RowDefinitions>
      <RowDefinition Height="95*"></RowDefinition> <!-- Content row -->
      <RowDefinition Height="3*"></RowDefinition> <!-- Navigation bar row -->
    </Grid.RowDefinitions>
    <!-- Navigation bar -->
    <Grid Name="Navbar" Grid.Row="1">
        <Button Name="NextPage" Click="NextPage_Click">NEXT PAGE</Button>
    </Grid>
    <!-- Main grid for content pane -->
    <Grid Name="Contentpane">
      <!-- Landing page -->
      <Grid Name="Landingpage" Visibility="Collapsed">
        <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
          <TextBlock Margin="10" FontSize="24" HorizontalAlignment="Center">
            ChaCha Visualization
          </TextBlock>
          <TextBlock HorizontalAlignment="Center">
            A stream cipher used in TLS by Daniel J. Bernstein
          </TextBlock>
        </StackPanel>
      </Grid>
      <!-- ChaCha workflow page -->
      <Grid Margin="20" Name="Workflowpage" Visibility="Collapsed">
        <!-- Grid for title and content -->
        <Grid.RowDefinitions>
          <RowDefinition Height="50" /> <!-- Title row -->
          <RowDefinition /> <!-- Content row -->
        </Grid.RowDefinitions>
        <!-- Title -->
        <TextBlock Grid.Row="0" HorizontalAlignment="Center" FontSize="20">ChaCha workflow</TextBlock>
        <!-- Grid for content -->
        <Grid Grid.Row="1">
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="4*"/> <!-- Steps + description column -->
            <ColumnDefinition Width="3*"/> <!-- Input params column -->
          </Grid.ColumnDefinitions>
          <!-- Steps + description -->
          <Grid Grid.Column="0">
            <Grid.RowDefinitions>
              <RowDefinition></RowDefinition>
              <RowDefinition Height="6*"></RowDefinition>
            </Grid.RowDefinitions>
            <!-- Description -->
            <StackPanel Grid.Row="0">
              <TextBlock TextWrapping="Wrap">Since ChaCha is a stream cipher, it encrypts messages by XOR'ing them with its keystream. The keystream depends on the key and initialization vector as we will see.</TextBlock>
              <TextBlock TextWrapping="Wrap">The keystream is generated by concatenating keystream blocks. To be able to XOR the whole message with the keystream, the keystream length must be equal or larger than the input length.</TextBlock>
            </StackPanel>
            <!-- Steps -->
            <Grid  Grid.Row="1">
              <Grid.RowDefinitions>
                <RowDefinition></RowDefinition>
                <RowDefinition></RowDefinition>
                <RowDefinition></RowDefinition>
                <RowDefinition></RowDefinition>
              </Grid.RowDefinitions>
              <StackPanel Grid.Row="0">
                <TextBlock TextWrapping="Wrap">This leads us to following steps:</TextBlock>
              </StackPanel>
              <StackPanel Margin="30,0,0,0" Grid.Row="1">
                <TextBlock TextWrapping="Wrap">1. Generate keystream blocks</TextBlock>
              </StackPanel>
              <StackPanel Margin="30,0,0,0"  Grid.Row="2">
                <TextBlock TextWrapping="Wrap">2. Chain keystream blocks</TextBlock>
              </StackPanel>
              <StackPanel Margin="30,0,0,0" Grid.Row="3">
                <TextBlock TextWrapping="Wrap">3. XOR input with keystream</TextBlock>
              </StackPanel>
            </Grid>
          </Grid>
        </Grid>
      </Grid>
      <!-- ChaCha State matrix page -->
      <Grid Margin="20" Name="Statematrixpage" Visibility="Visible">
        <!-- Grid for title and content -->
        <Grid.RowDefinitions>
          <RowDefinition Height="50" /> <!-- Title row -->
          <RowDefinition /> <!-- Content row -->
        </Grid.RowDefinitions>
        <!-- Title -->
        <TextBlock Grid.Row="0" HorizontalAlignment="Center" FontSize="20">State matrix</TextBlock>
        <!-- Grid for content -->
        <Grid Grid.Row="1">
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="4*"/> <!-- state matrix + transformation steps column -->
            <ColumnDefinition Width="3*"/> <!-- Input params column -->
          </Grid.ColumnDefinitions>
          <!-- state matrix + transformation steps -->
          <Grid Grid.Column="0">
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition></RowDefinition> <!-- state matrix row -->
                <RowDefinition></RowDefinition> <!-- little-endian transformation step row -->
              </Grid.RowDefinitions>
              <!-- State matrix -->
              <Grid Grid.Row="0">
                <Border BorderBrush="Black" BorderThickness="0,1,1,0">
                  <Grid>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition></ColumnDefinition>
                      <ColumnDefinition></ColumnDefinition>
                      <ColumnDefinition></ColumnDefinition>
                      <ColumnDefinition></ColumnDefinition>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                      <RowDefinition></RowDefinition>
                      <RowDefinition></RowDefinition>
                      <RowDefinition></RowDefinition>
                      <RowDefinition></RowDefinition>
                    </Grid.RowDefinitions>
                    <!-- Row 0 -->
                    <Border Grid.Row="0" Grid.Column="0" BorderBrush="Black" BorderThickness="1,0,0,1">
                      <Label Content="{ Binding StateC0 }"/>
                    </Border>
                    <Border Grid.Row="0" Grid.Column="1" BorderBrush="Black" BorderThickness="1,0,0,1">
                      <Label Content="{ Binding StateC1 }"/>
                    </Border>
                    <Border Grid.Row="0" Grid.Column="2" BorderBrush="Black" BorderThickness="1,0,0,1">
                      <Label Content="{ Binding StateC2 }"/>
                    </Border>
                    <Border Grid.Row="0" Grid.Column="3" BorderBrush="Black" BorderThickness="1,0,0,1">
                      <Label Content="{ Binding StateC3 }"/>
                    </Border>
                    <!-- Row 1 -->
                    <Border Grid.Row="1" Grid.Column="0" BorderBrush="Black" BorderThickness="1,0,0,1">
                      <Label Content="{ Binding StateK0 }"/>
                    </Border>
                    <Border Grid.Row="1" Grid.Column="1" BorderBrush="Black" BorderThickness="1,0,0,1">
                      <Label Content="{ Binding StateK1 }"/>
                    </Border>
                    <Border Grid.Row="1" Grid.Column="2" BorderBrush="Black" BorderThickness="1,0,0,1">
                      <Label Content="{ Binding StateK2 }"/>
                    </Border>
                    <Border Grid.Row="1" Grid.Column="3" BorderBrush="Black" BorderThickness="1,0,0,1">
                      <Label Content="{ Binding StateK3 }"/>
                    </Border>
                    <!-- Row 2 -->
                    <Border Grid.Row="2" Grid.Column="0" BorderBrush="Black" BorderThickness="1,0,0,1">
                      <Label Content="{ Binding StateK4 }"/>
                    </Border>
                    <Border Grid.Row="2" Grid.Column="1" BorderBrush="Black" BorderThickness="1,0,0,1">
                      <Label Content="{ Binding StateK5 }"/>
                    </Border>
                    <Border Grid.Row="2" Grid.Column="2" BorderBrush="Black" BorderThickness="1,0,0,1">
                      <Label Content="{ Binding StateK6 }"/>
                    </Border>
                    <Border Grid.Row="2" Grid.Column="3" BorderBrush="Black" BorderThickness="1,0,0,1">
                      <Label Content="{ Binding StateK7 }"/>
                    </Border>
                    <!-- Row 3 -->
                    <Border Grid.Row="3" Grid.Column="0" BorderBrush="Black" BorderThickness="1,0,0,1">
                      <Label Content="{ Binding StateInput0 }"/>
                    </Border>
                    <Border Grid.Row="3" Grid.Column="1" BorderBrush="Black" BorderThickness="1,0,0,1">
                      <Label Content="{ Binding StateInput1 }"/>
                    </Border>
                    <Border Grid.Row="3" Grid.Column="2" BorderBrush="Black" BorderThickness="1,0,0,1">
                      <Label Content="{ Binding StateInput2 }"/>
                    </Border>
                    <Border Grid.Row="3" Grid.Column="3" BorderBrush="Black" BorderThickness="1,0,0,1">
                      <Label Content="{ Binding StateInput3 }"/>
                    </Border>
                  </Grid>
                </Border>
              </Grid>
              <!-- little-endian transformation -->
              <Grid Margin="10" Grid.Row="1">
                <Grid.RowDefinitions>
                  <RowDefinition></RowDefinition>
                  <RowDefinition></RowDefinition>
                  <RowDefinition></RowDefinition>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition></ColumnDefinition>
                  <ColumnDefinition></ColumnDefinition>
                </Grid.ColumnDefinitions>
                <TextBlock Grid.Row="0" Grid.Column="0">
                  Input:
                </TextBlock>
                <Label Grid.Row="1" Grid.Column="1" Content="{ Binding TransformInput }"/>
                <TextBlock Grid.Row="1" Grid.Column="0">
                  Split into 4 byte chunks:
                </TextBlock>
                <Label Grid.Row="1" Grid.Column="1" Content="{ Binding TransformChunks }"/>
                <TextBlock Grid.Row="2" Grid.Column="0">
                  Transform each chunk into <LineBreak/> little-endian:
                </TextBlock>
                <Label Grid.Row="2" Grid.Column="1" Content="{ Binding TransformLittleEndian }"/>
              </Grid>
            </Grid>
          </Grid>
          <!-- Input parameter -->
          <Grid Margin="100,0,0,0" Grid.Column="1">
            <Grid.RowDefinitions>
              <RowDefinition Height="2*"></RowDefinition>
              <RowDefinition Height="4*"></RowDefinition>
              <RowDefinition Height="4*"></RowDefinition>
              <RowDefinition Height="4*"></RowDefinition>
              <RowDefinition Height="4*"></RowDefinition>
            </Grid.RowDefinitions>
            <Label Grid.Row="0" HorizontalAlignment="Center">State Parameters</Label>
            <StackPanel Grid.Row="1" Orientation="Horizontal">
              <Label>Constant:</Label>
              <Label Content="{ Binding StateParamsConstant }"/>
            </StackPanel>
            <StackPanel Grid.Row="2" Orientation="Horizontal">
              <Label>Key:</Label>
              <Label Content="{ Binding StateParamsKey }"/>
            </StackPanel>
            <StackPanel Grid.Row="3" Orientation="Horizontal">
              <Label>Initialization vector (IV):</Label>
              <Label Content="{ Binding StateParamsIV }"/>
            </StackPanel>
            <StackPanel Grid.Row="4" Orientation="Horizontal">
              <Label>Input message:</Label>
              <Label Content="{ Binding StateParamsInput }"/>
            </StackPanel>
          </Grid>
        </Grid>
      </Grid>
    </Grid>
  </Grid>
</UserControl>