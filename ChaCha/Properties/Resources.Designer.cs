//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cryptool.Plugins.ChaCha.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Cryptool.Plugins.ChaCha.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ChaCha.
        /// </summary>
        public static string ChaChaCaption {
            get {
                return ResourceManager.GetString("ChaChaCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A stream cipher based on Salsa20 and used in TLS. Developed by Daniel J. Bernstein..
        /// </summary>
        public static string ChaChaTooltip {
            get {
                return ResourceManager.GetString("ChaChaTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Initial counter.
        /// </summary>
        public static string InputInitialCounterCaption {
            get {
                return ResourceManager.GetString("InputInitialCounterCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Initial keystream block counter. Will be incremented for each keystream block. 64-bit for DJB version. 32-bit for IETF version..
        /// </summary>
        public static string InputInitialCounterTooltip {
            get {
                return ResourceManager.GetString("InputInitialCounterTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Initialization vector.
        /// </summary>
        public static string InputIVCaption {
            get {
                return ResourceManager.GetString("InputIVCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Initialization vector. 64-bit for DJB version. 96-bit for IETF version..
        /// </summary>
        public static string InputIVTooltip {
            get {
                return ResourceManager.GetString("InputIVTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Key.
        /// </summary>
        public static string InputKeyCaption {
            get {
                return ResourceManager.GetString("InputKeyCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Key. Can be 128-bit or 256-bit. A 128-bit key will be expanded into a 256-bit key via concatenation with itself..
        /// </summary>
        public static string InputKeyTooltip {
            get {
                return ResourceManager.GetString("InputKeyTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Plain text.
        /// </summary>
        public static string InputStreamCaption {
            get {
                return ResourceManager.GetString("InputStreamCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Input text which should be encrypted or decrypted with ChaCha..
        /// </summary>
        public static string InputStreamTooltip {
            get {
                return ResourceManager.GetString("InputStreamTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cipher text.
        /// </summary>
        public static string OutputStreamCaption {
            get {
                return ResourceManager.GetString("OutputStreamCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Output text encrypted or decrypted with ChaCha..
        /// </summary>
        public static string OutputStreamTooltip {
            get {
                return ResourceManager.GetString("OutputStreamTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Constants (nothing-up-my-sleeves numbers) (128-bit).
        /// </summary>
        public static string OverviewConstants {
            get {
                return ResourceManager.GetString("OverviewConstants", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Keystream block counter.
        /// </summary>
        public static string OverviewCounter {
            get {
                return ResourceManager.GetString("OverviewCounter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ChaCha is a stream cipher.
        ///It generates a pseudorandom stream of bits (keystream) and then encrypts the input message by performing a XOR bitwise operation on it with this keystream..
        /// </summary>
        public static string OverviewIntro1 {
            get {
                return ResourceManager.GetString("OverviewIntro1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The keystream is created by first generating keystream blocks of 512 bits and concatenating them until the keystream size is equal or larger than the input.
        ///To generate the keystream, ChaCha uses for each keystream block a 512 bit state which consists of following four values:.
        /// </summary>
        public static string OverviewIntro2 {
            get {
                return ResourceManager.GetString("OverviewIntro2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Initialization vector.
        /// </summary>
        public static string OverviewIV {
            get {
                return ResourceManager.GetString("OverviewIV", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Key (128-bit or 256-bit. A 128-bit key will be expanded into a 256-bit key.).
        /// </summary>
        public static string OverviewKey {
            get {
                return ResourceManager.GetString("OverviewKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to State as a 4x4 matrix where each cell is 4 bytes.
        /// </summary>
        public static string OverviewMatrixCaption {
            get {
                return ResourceManager.GetString("OverviewMatrixCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CONSTANT.
        /// </summary>
        public static string OverviewMatrixConstants {
            get {
                return ResourceManager.GetString("OverviewMatrixConstants", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to COUNTER.
        /// </summary>
        public static string OverviewMatrixCounter {
            get {
                return ResourceManager.GetString("OverviewMatrixCounter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IV.
        /// </summary>
        public static string OverviewMatrixIV {
            get {
                return ResourceManager.GetString("OverviewMatrixIV", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to KEY.
        /// </summary>
        public static string OverviewMatrixKey {
            get {
                return ResourceManager.GetString("OverviewMatrixKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Overview.
        /// </summary>
        public static string OverviewName {
            get {
                return ResourceManager.GetString("OverviewName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Applying the ChaCha hash function to the 512 bit state would then return a keystream block..
        /// </summary>
        public static string OverviewOutro1 {
            get {
                return ResourceManager.GetString("OverviewOutro1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This leads us to following steps to encrypt a message M using the ChaCha cipher:.
        /// </summary>
        public static string OverviewOutro2 {
            get {
                return ResourceManager.GetString("OverviewOutro2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Initialize state matrix.
        /// </summary>
        public static string OverviewOutroStep1 {
            get {
                return ResourceManager.GetString("OverviewOutroStep1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generate keystream.
        /// </summary>
        public static string OverviewOutroStep2 {
            get {
                return ResourceManager.GetString("OverviewOutroStep2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to M XOR Keystream.
        /// </summary>
        public static string OverviewOutroStep3 {
            get {
                return ResourceManager.GetString("OverviewOutroStep3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remark: Due to XOR being the inverse function to itself, decryption works exactly the same..
        /// </summary>
        public static string OverviewRemark {
            get {
                return ResourceManager.GetString("OverviewRemark", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Overview.
        /// </summary>
        public static string OverviewTitle {
            get {
                return ResourceManager.GetString("OverviewTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rounds.
        /// </summary>
        public static string RoundCaption {
            get {
                return ResourceManager.GetString("RoundCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select how many rounds you want to use..
        /// </summary>
        public static string RoundTooltip {
            get {
                return ResourceManager.GetString("RoundTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Constants.
        /// </summary>
        public static string StateMatrixButtonConstants {
            get {
                return ResourceManager.GetString("StateMatrixButtonConstants", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Counter.
        /// </summary>
        public static string StateMatrixButtonCounter {
            get {
                return ResourceManager.GetString("StateMatrixButtonCounter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Initialization vector.
        /// </summary>
        public static string StateMatrixButtonIV {
            get {
                return ResourceManager.GetString("StateMatrixButtonIV", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Key.
        /// </summary>
        public static string StateMatrixButtonKey {
            get {
                return ResourceManager.GetString("StateMatrixButtonKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The 512-bit (128-byte) ChaCha state can be interpreted as a 4x4 matrix, where each entry consists of 4 bytes. The state entries consist of the parameters you can see below. They will be encoded before insertion into the state matrix..
        /// </summary>
        public static string StateMatrixDescription1 {
            get {
                return ResourceManager.GetString("StateMatrixDescription1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The first 16 bytes consist of the .
        /// </summary>
        public static string StateMatrixDescription2_1 {
            get {
                return ResourceManager.GetString("StateMatrixDescription2_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to constants.
        /// </summary>
        public static string StateMatrixDescription2_2 {
            get {
                return ResourceManager.GetString("StateMatrixDescription2_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The next 32 bytes consist of the.
        /// </summary>
        public static string StateMatrixDescription3_1 {
            get {
                return ResourceManager.GetString("StateMatrixDescription3_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to key.
        /// </summary>
        public static string StateMatrixDescription3_2 {
            get {
                return ResourceManager.GetString("StateMatrixDescription3_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If the key consists of only 16 bytes, it is concatenated with itself..
        /// </summary>
        public static string StateMatrixDescription3_3 {
            get {
                return ResourceManager.GetString("StateMatrixDescription3_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The next.
        /// </summary>
        public static string StateMatrixDescription4_1 {
            get {
                return ResourceManager.GetString("StateMatrixDescription4_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to bytes consist of the.
        /// </summary>
        public static string StateMatrixDescription4_2 {
            get {
                return ResourceManager.GetString("StateMatrixDescription4_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to counter.
        /// </summary>
        public static string StateMatrixDescription4_3 {
            get {
                return ResourceManager.GetString("StateMatrixDescription4_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The counter is special since we first reverse all bytes. This is so because all other parameters are assumed to be already in little-endian thus no reversing needed..
        /// </summary>
        public static string StateMatrixDescription4_4 {
            get {
                return ResourceManager.GetString("StateMatrixDescription4_4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The next.
        /// </summary>
        public static string StateMatrixDescription5_1 {
            get {
                return ResourceManager.GetString("StateMatrixDescription5_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to bytes consist of the.
        /// </summary>
        public static string StateMatrixDescription5_2 {
            get {
                return ResourceManager.GetString("StateMatrixDescription5_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IV.
        /// </summary>
        public static string StateMatrixDescription5_3 {
            get {
                return ResourceManager.GetString("StateMatrixDescription5_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to On the next page we will pass this initialized state matrix to the ChaCha hash function to generate our first keystream block..
        /// </summary>
        public static string StateMatrixDescription6 {
            get {
                return ResourceManager.GetString("StateMatrixDescription6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Original value (ASCII):.
        /// </summary>
        public static string StateMatrixEncodingConstants1 {
            get {
                return ResourceManager.GetString("StateMatrixEncodingConstants1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to As bytes:.
        /// </summary>
        public static string StateMatrixEncodingConstants2 {
            get {
                return ResourceManager.GetString("StateMatrixEncodingConstants2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Split into 4 byte chunks:.
        /// </summary>
        public static string StateMatrixEncodingConstants3 {
            get {
                return ResourceManager.GetString("StateMatrixEncodingConstants3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reverse byte order of each chunk:.
        /// </summary>
        public static string StateMatrixEncodingConstants4 {
            get {
                return ResourceManager.GetString("StateMatrixEncodingConstants4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Constants encoding.
        /// </summary>
        public static string StateMatrixEncodingConstantsHeader {
            get {
                return ResourceManager.GetString("StateMatrixEncodingConstantsHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Original value:.
        /// </summary>
        public static string StateMatrixEncodingCounter1 {
            get {
                return ResourceManager.GetString("StateMatrixEncodingCounter1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reverse all bytes:.
        /// </summary>
        public static string StateMatrixEncodingCounter2 {
            get {
                return ResourceManager.GetString("StateMatrixEncodingCounter2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Split into 4 byte chunks:.
        /// </summary>
        public static string StateMatrixEncodingCounter3 {
            get {
                return ResourceManager.GetString("StateMatrixEncodingCounter3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reverse byte order of each chunk:.
        /// </summary>
        public static string StateMatrixEncodingCounter4 {
            get {
                return ResourceManager.GetString("StateMatrixEncodingCounter4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Counter encoding.
        /// </summary>
        public static string StateMatrixEncodingCounterHeader {
            get {
                return ResourceManager.GetString("StateMatrixEncodingCounterHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Original value:.
        /// </summary>
        public static string StateMatrixEncodingIV1 {
            get {
                return ResourceManager.GetString("StateMatrixEncodingIV1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Split into 4 byte chunks:.
        /// </summary>
        public static string StateMatrixEncodingIV2 {
            get {
                return ResourceManager.GetString("StateMatrixEncodingIV2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reverse byte order of each chunk:.
        /// </summary>
        public static string StateMatrixEncodingIV3 {
            get {
                return ResourceManager.GetString("StateMatrixEncodingIV3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IV encoding.
        /// </summary>
        public static string StateMatrixEncodingIVHeader {
            get {
                return ResourceManager.GetString("StateMatrixEncodingIVHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Original value:.
        /// </summary>
        public static string StateMatrixEncodingKey1 {
            get {
                return ResourceManager.GetString("StateMatrixEncodingKey1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Split into 4 byte chunks:.
        /// </summary>
        public static string StateMatrixEncodingKey2 {
            get {
                return ResourceManager.GetString("StateMatrixEncodingKey2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reverse byte order of each chunk:.
        /// </summary>
        public static string StateMatrixEncodingKey3 {
            get {
                return ResourceManager.GetString("StateMatrixEncodingKey3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Key encoding.
        /// </summary>
        public static string StateMatrixEncodingKeyHeader {
            get {
                return ResourceManager.GetString("StateMatrixEncodingKeyHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to State Matrix.
        /// </summary>
        public static string StateMatrixName {
            get {
                return ResourceManager.GetString("StateMatrixName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Constants.
        /// </summary>
        public static string StateMatrixParameterConstants {
            get {
                return ResourceManager.GetString("StateMatrixParameterConstants", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Initial counter.
        /// </summary>
        public static string StateMatrixParameterCounter {
            get {
                return ResourceManager.GetString("StateMatrixParameterCounter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to State parameters.
        /// </summary>
        public static string StateMatrixParameterHeader {
            get {
                return ResourceManager.GetString("StateMatrixParameterHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Initialization vector.
        /// </summary>
        public static string StateMatrixParameterIV {
            get {
                return ResourceManager.GetString("StateMatrixParameterIV", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Key.
        /// </summary>
        public static string StateMatrixParameterKey {
            get {
                return ResourceManager.GetString("StateMatrixParameterKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to State Matrix Initialization.
        /// </summary>
        public static string StateMatrixTitle {
            get {
                return ResourceManager.GetString("StateMatrixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Version.
        /// </summary>
        public static string VersionCaption {
            get {
                return ResourceManager.GetString("VersionCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select which version you want to use. They only differ in their counter and IV size. DJB version uses a 64-bit counter and a 64-bit IV. IETF version uses a 32-bit counter and a 96-bit IV..
        /// </summary>
        public static string VersionTooltip {
            get {
                return ResourceManager.GetString("VersionTooltip", resourceCulture);
            }
        }
    }
}
